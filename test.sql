-- 1. Create 'products' table
CREATE TABLE products (
    product_id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    price DECIMAL(10,2) NOT NULL,
    quantity_in_stock INT NOT NULL
);

-- 2. Add new products
INSERT INTO products (name, description, price, quantity_in_stock) 
VALUES ('Laptop', 'High-performance laptop', 1200.00, 10);

-- 3. Adjust product price
UPDATE products 
SET price = 1300.00 
WHERE product_id = 1;

-- 4. Remove discontinued product
DELETE FROM products 
WHERE product_id = 1;

-- 5. Create 'users' table
CREATE TABLE users (
    user_id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    shipping_address TEXT NOT NULL
);

-- 6. Create 'orders' table
CREATE TABLE orders (
    order_id SERIAL PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    product_id INT REFERENCES products(product_id),
    purchase_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    quantity_ordered INT NOT NULL
);

-- 7. Retrieve all orders by a specific user
SELECT * FROM orders 
WHERE user_id = 1;

-- 8. Calculate total revenue generated by each product
SELECT 
    p.product_id, 
    p.name, 
    SUM(o.quantity_ordered * p.price) AS total_revenue
FROM products p
JOIN orders o ON p.product_id = o.product_id
GROUP BY p.product_id, p.name;

-- 9. Find the average price of products in each category (assuming category column exists)
CREATE TABLE categories (
    category_id SERIAL PRIMARY KEY,
    category_name VARCHAR(255) NOT NULL
);

ALTER TABLE products ADD COLUMN category_id INT REFERENCES categories(category_id);

SELECT 
    c.category_name, 
    AVG(p.price) AS average_price
FROM products p
JOIN categories c ON p.category_id = c.category_id
GROUP BY c.category_name;

-- 10. Retrieve the top 5 most expensive products
SELECT * FROM products 
ORDER BY price DESC 
LIMIT 5;
