-- 1. Retrieve the list of customers who haven't placed an order in the last 3 months
SELECT c.customer_id, c.name, c.email
FROM customers c
LEFT JOIN orders o ON c.customer_id = o.customer_id 
    AND o.order_date >= CURRENT_DATE - INTERVAL '3 months'
WHERE o.order_id IS NULL;

-- 2. Generate a report summarizing the total revenue generated by each product category
SELECT p.category, SUM(oi.quantity * oi.unit_price) AS total_revenue
FROM order_items oi
JOIN products p ON oi.product_id = p.product_id
GROUP BY p.category;

-- 3. Add a new column to the 'products' table to store product ratings (out of 5)
ALTER TABLE products
ADD COLUMN rating DECIMAL(2,1);  -- e.g., 4.3

-- 4. Update the inventory of a product after an order is placed
-- Assuming an `inventory` table with (product_id, stock_quantity)
-- Example for product_id = 101 and quantity = 2
UPDATE inventory
SET stock_quantity = stock_quantity - 2
WHERE product_id = 101;

-- 5. Remove products from the 'products' table that are marked as 'discontinued'
DELETE FROM products
WHERE status = 'discontinued';

-- 6. Find the average order value for each customer
SELECT o.customer_id, 
       ROUND(AVG(oi.quantity * oi.unit_price), 2) AS avg_order_value
FROM orders o
JOIN order_items oi ON o.order_id = oi.order_id
GROUP BY o.customer_id;

-- 7. Optimize the query that retrieves all orders placed between two specific dates
-- Use an indexed order_date column (ensure index exists)
-- Here's the optimized SELECT:
SELECT *
FROM orders
WHERE order_date BETWEEN '2024-01-01' AND '2024-03-31';

-- Suggested index (only run once):
CREATE INDEX idx_orders_order_date ON orders(order_date);

-- 8. Restructure the 'orders' table to adhere to 3NF
-- Ensure separation of concerns (e.g., customer and shipping info in separate tables)
-- Example:
-- Step 1: Remove embedded customer data (if present)
ALTER TABLE orders
DROP COLUMN customer_name,
DROP COLUMN customer_email;

-- Step 2: Link orders to customer_id only
-- Already assumed as: orders(customer_id)

-- Step 3: Create a shipping_info table (if needed)
CREATE TABLE shipping_info (
    shipping_id SERIAL PRIMARY KEY,
    order_id INT REFERENCES orders(order_id),
    address TEXT,
    city VARCHAR(100),
    state VARCHAR(100),
    postal_code VARCHAR(20)
);

-- 9. Create a view that displays customer details along with their total spending
CREATE OR REPLACE VIEW customer_spending AS
SELECT c.customer_id, c.name, c.email, 
       SUM(oi.quantity * oi.unit_price) AS total_spent
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
JOIN order_items oi ON o.order_id = oi.order_id
GROUP BY c.customer_id, c.name, c.email;

-- 10. Write a stored procedure to automatically update the product price 
-- based on demand and stock availability
-- Rules: If demand is high (e.g., sales > 100) and stock is low (< 50), increase price by 10%
DELIMITER $$

CREATE PROCEDURE adjust_product_prices()
BEGIN
    UPDATE products p
    SET p.price = p.price * 1.10
    WHERE p.product_id IN (
        SELECT oi.product_id
        FROM order_items oi
        GROUP BY oi.product_id
        HAVING SUM(oi.quantity) > 100
    )
    AND EXISTS (
        SELECT 1
        FROM inventory i
        WHERE i.product_id = p.product_id AND i.stock_quantity < 50
    );
END $$

DELIMITER ;
