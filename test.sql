-- Retrieve the list of products with their corresponding category names
SELECT p.product_name, c.category_name
FROM Products p
JOIN Categories c ON p.category_id = c.category_id
ORDER BY c.category_name, p.product_name;

-- Add a new customer to the database
INSERT INTO Customers (customer_name, email, shipping_address)
VALUES ('John Doe', 'john.doe@example.com', '123 Main St, New York, NY');

-- Modify the price of a specific product by a given percentage
UPDATE Products
SET price = price * 1.10  -- Increase price by 10%
WHERE product_id = 101;  -- Replace with actual product ID

-- Remove orders that were placed before a specific date
DELETE FROM Orders
WHERE order_date < '2023-01-01';  -- Replace with desired date

-- Find the average order value for each month
SELECT 
    DATE_FORMAT(order_date, '%Y-%m') AS order_month,
    AVG(total_amount) AS avg_order_value
FROM Orders
GROUP BY order_month
ORDER BY order_month;

-- Retrieve the top 5 best-selling products
SELECT p.product_name, SUM(od.quantity) AS total_sold
FROM OrderDetails od
JOIN Products p ON od.product_id = p.product_id
GROUP BY p.product_name
ORDER BY total_sold DESC
LIMIT 5;

-- For each customer, retrieve their latest order date
SELECT customer_id, MAX(order_date) AS latest_order_date
FROM Orders
GROUP BY customer_id;

-- Create a report that shows the total revenue generated by each product category
SELECT c.category_name, SUM(od.quantity * od.unit_price) AS total_revenue
FROM OrderDetails od
JOIN Products p ON od.product_id = p.product_id
JOIN Categories c ON p.category_id = c.category_id
GROUP BY c.category_name
ORDER BY total_revenue DESC;

-- Find customers who have placed orders in multiple categories
SELECT o.customer_id
FROM Orders o
JOIN OrderDetails od ON o.order_id = od.order_id
JOIN Products p ON od.product_id = p.product_id
JOIN Categories c ON p.category_id = c.category_id
GROUP BY o.customer_id
HAVING COUNT(DISTINCT c.category_id) > 1;

-- Implement a mechanism to record the date and time when a product is added to the cart
ALTER TABLE Cart ADD COLUMN added_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP;

-- Insert example: When adding a product to the cart
INSERT INTO Cart (customer_id, product_id, quantity, added_at)
VALUES (123, 101, 2, NOW());  -- Replace values as needed
