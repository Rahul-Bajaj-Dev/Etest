-- Retrieve the top 5 best-selling products from the last quarter
SELECT product_id, product_name, SUM(quantity) AS total_sold
FROM orders
WHERE order_date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH)
GROUP BY product_id, product_name
ORDER BY total_sold DESC
LIMIT 5;

-- Identify users who haven't made a purchase in the past six months
SELECT user_id, username
FROM users
WHERE user_id NOT IN (
    SELECT DISTINCT user_id FROM orders
    WHERE order_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH)
);

-- Calculate the average order value for each product category
SELECT p.category, AVG(o.total_price) AS avg_order_value
FROM orders o
JOIN products p ON o.product_id = p.product_id
GROUP BY p.category;

-- Generate a report listing all orders placed between two specific dates
SELECT *
FROM orders
WHERE order_date BETWEEN '2024-01-01' AND '2024-03-01'
ORDER BY order_date;

-- Find the customer who has placed the highest number of orders
SELECT user_id, COUNT(order_id) AS total_orders
FROM orders
GROUP BY user_id
ORDER BY total_orders DESC
LIMIT 1;

-- List all products with a price higher than the average product price
SELECT *
FROM products
WHERE price > (SELECT AVG(price) FROM products);

-- Retrieve the order history for a given customer, sorted by order date
SELECT *
FROM orders
WHERE user_id = 12345 -- Replace with actual customer ID
ORDER BY order_date DESC;

-- For each product, find the customer who made the most recent purchase
SELECT o.product_id, p.product_name, o.user_id, u.username, MAX(o.order_date) AS last_purchase_date
FROM orders o
JOIN products p ON o.product_id = p.product_id
JOIN users u ON o.user_id = u.user_id
GROUP BY o.product_id, p.product_name, o.user_id, u.username;

-- Calculate the total revenue generated by each sales channel
SELECT sales_channel, SUM(total_price) AS total_revenue
FROM orders
GROUP BY sales_channel;

-- List products that have never been purchased
SELECT *
FROM products
WHERE product_id NOT IN (SELECT DISTINCT product_id FROM orders);
