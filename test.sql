-- Create 'products' table
CREATE TABLE products (
    product_id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    price DECIMAL(10,2) NOT NULL,
    quantity_in_stock INT NOT NULL
);

-- Create 'users' table
CREATE TABLE users (
    user_id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    shipping_address TEXT NOT NULL
);

-- Create 'categories' table (optional, for categorizing products)
CREATE TABLE categories (
    category_id SERIAL PRIMARY KEY,
    category_name VARCHAR(255) NOT NULL
);

-- Add category_id column to 'products' table
ALTER TABLE products ADD COLUMN category_id INT REFERENCES categories(category_id);

-- Create 'orders' table
CREATE TABLE orders (
    order_id SERIAL PRIMARY KEY,
    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,
    product_id INT REFERENCES products(product_id) ON DELETE CASCADE,
    purchase_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    quantity INT NOT NULL
);

-- Insert sample data into 'products' table
INSERT INTO products (name, description, price, quantity_in_stock, category_id)
VALUES ('Laptop', 'High-performance laptop', 1200.99, 10, NULL);

-- Insert sample data into 'users' table
INSERT INTO users (name, email, shipping_address)
VALUES ('John Doe', 'john@example.com', '123 Main St, City, Country');

-- Update the price of a product
UPDATE products
SET price = 1300.99
WHERE product_id = 1;

-- Delete a discontinued product
DELETE FROM products
WHERE product_id = 1;

-- Retrieve all orders placed by a specific user
SELECT * FROM orders
WHERE user_id = 1;

-- Calculate total revenue generated by sales of each product
SELECT p.product_id, p.name, SUM(o.quantity * p.price) AS total_revenue
FROM orders o
JOIN products p ON o.product_id = p.product_id
GROUP BY p.product_id, p.name;

-- Find the average price of products in each category
SELECT c.category_name, AVG(p.price) AS avg_price
FROM products p
JOIN categories c ON p.category_id = c.category_id
GROUP BY c.category_name;

-- Retrieve the top 5 most expensive products
SELECT * FROM products
ORDER BY price DESC
LIMIT 5;
