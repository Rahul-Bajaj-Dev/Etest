-- 1. Retrieve the names and emails of all customers living in 'New York'
SELECT name, email
FROM customers
WHERE city = 'New York';

-- 2. List all products in the 'Electronics' category sorted by price in descending order
SELECT *
FROM products
WHERE category = 'Electronics'
ORDER BY price DESC;

-- 3. Find the total revenue generated by each product category
SELECT p.category, SUM(oi.quantity * p.price) AS total_revenue
FROM order_items oi
JOIN products p ON oi.product_id = p.product_id
GROUP BY p.category;

-- 4. Display the names of customers who have placed more than 5 orders
SELECT c.name, COUNT(o.order_id) AS order_count
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id, c.name
HAVING COUNT(o.order_id) > 5;

-- 5. Calculate the average order value for each month
SELECT 
    DATE_TRUNC('month', o.order_date) AS month,
    ROUND(AVG(oi.quantity * p.price), 2) AS avg_order_value
FROM orders o
JOIN order_items oi ON o.order_id = oi.order_id
JOIN products p ON oi.product_id = p.product_id
GROUP BY month
ORDER BY month;

-- 6. Identify the top 3 customers who spent the most money
SELECT c.customer_id, c.name, SUM(oi.quantity * p.price) AS total_spent
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
JOIN order_items oi ON o.order_id = oi.order_id
JOIN products p ON oi.product_id = p.product_id
GROUP BY c.customer_id, c.name
ORDER BY total_spent DESC
LIMIT 3;

-- 7. Add a new column named 'discount_applied' to the 'Orders' table
ALTER TABLE orders
ADD COLUMN discount_applied VARCHAR(3); -- Possible values: 'Yes' or 'No'

-- 8. For customers who have placed orders worth more than $500 in total, update 'discount_applied' flag to 'Yes'
UPDATE orders
SET discount_applied = 'Yes'
WHERE customer_id IN (
    SELECT o.customer_id
    FROM orders o
    JOIN order_items oi ON o.order_id = oi.order_id
    JOIN products p ON oi.product_id = p.product_id
    GROUP BY o.customer_id
    HAVING SUM(oi.quantity * p.price) > 500
);

-- Set all other orders to 'No' for completeness
UPDATE orders
SET discount_applied = 'No'
WHERE discount_applied IS NULL;

-- 9. Remove all orders placed before 2022
DELETE FROM order_items
WHERE order_id IN (
    SELECT order_id
    FROM orders
    WHERE order_date < '2022-01-01'
);

DELETE FROM orders
WHERE order_date < '2022-01-01';

-- 10. Create a view that shows the customer name, product name, and quantity purchased for each order
CREATE OR REPLACE VIEW customer_order_summary AS
SELECT 
    c.name AS customer_name,
    p.name AS product_name,
    oi.quantity
FROM orders o
JOIN customers c ON o.customer_id = c.customer_id
JOIN order_items oi ON o.order_id = oi.order_id
JOIN products p ON oi.product_id = p.product_id;
